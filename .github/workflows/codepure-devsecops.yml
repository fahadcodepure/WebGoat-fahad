name: Codepure DevSecOps Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  CODEPURE_API: "http://100.73.201.73:3000"
  CODEPURE_PROJECT: "WebGoat-fahad"
  CODEPURE_LANGUAGE: "java"
  CODEPURE_OWNER: "fahadcodepure"
  CODEPURE_REPO: "WebGoat-fahad"
  CODEPURE_TRIGGER: "github"

jobs:
  sast_scan:
    name: 🔍 Stage 1 — SAST Scan
    runs-on: self-hosted

    steps:
      - name: Print context
        run: |
          echo "📍 Branch: ${{ github.ref_name }}"
          echo "📦 Commit: ${{ github.sha }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "🕒 Timestamp: $(date)"

      - name: Validate API Token
        run: |
          if [ -z "${{ secrets.CODEPURE_API_TOKEN }}" ]; then
            echo "❌ Missing CODEPURE_API_TOKEN"
            exit 1
          fi
          echo "✅ CODEPURE_API_TOKEN is present"

      - name: 🚀 Trigger SAST Scan
        id: sast
        run: |
          curl -s -X POST "${{ env.CODEPURE_API }}/api/github/devsecops/commit" \
            -H "Content-Type: application/json" \
            -H "Authorization: Token ${{ secrets.CODEPURE_API_TOKEN }}" \
            --data-raw "$(jq -n \
              --arg engine "SAST" \
              --arg repo_name '${{ env.CODEPURE_REPO }}' \
              --arg owner '${{ env.CODEPURE_OWNER }}' \
              --arg branch '${{ github.ref_name }}' \
              --arg commit_hash '${{ github.sha }}' \
              --arg project_name '${{ env.CODEPURE_PROJECT }}' \
              --arg language '${{ env.CODEPURE_LANGUAGE }}' \
              --arg triggered_by '${{ env.CODEPURE_TRIGGER }}' \
              '{
                repo_name: $repo_name,
                owner: $owner,
                branch: $branch,
                commit_hash: $commit_hash,
                project_name: $project_name,
                language: $language,
                triggered_by: $triggered_by,
                engines: [$engine]
              }')" > sast_result.json

      - name: Evaluate SAST Results
        run: |
          if ! jq -e '.summary | type == "array"' sast_result.json > /dev/null; then
            echo "❌ Invalid SAST scan result"
            cat sast_result.json
            exit 1
          fi

          VULN_COUNT=$(jq '[.summary[] | .count] | add' sast_result.json)
          echo "🔢 SAST vulnerabilities: $VULN_COUNT"

          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "🚨 SAST failed. Blocking further stages."
            jq -r '.summary[] | "• \(.bug_name): \(.count) [\(.severity)]"' sast_result.json
            jq -r '.dashboard' sast_result.json
            exit 1
          else
            echo "✅ SAST passed."
          fi

  secret_scan:
    name: 🔐 Stage 2 — Secret Scanning
    needs: sast_scan
    runs-on: self-hosted

    steps:
      - name: 🚀 Trigger Secret Scan
        id: secrets
        run: |
          curl -s -X POST "${{ env.CODEPURE_API }}/api/github/devsecops/commit" \
            -H "Content-Type: application/json" \
            -H "Authorization: Token ${{ secrets.CODEPURE_API_TOKEN }}" \
            --data-raw "$(jq -n \
              --arg engine "SECRETS" \
              --arg repo_name '${{ env.CODEPURE_REPO }}' \
              --arg owner '${{ env.CODEPURE_OWNER }}' \
              --arg branch '${{ github.ref_name }}' \
              --arg commit_hash '${{ github.sha }}' \
              --arg project_name '${{ env.CODEPURE_PROJECT }}' \
              --arg language '${{ env.CODEPURE_LANGUAGE }}' \
              --arg triggered_by '${{ env.CODEPURE_TRIGGER }}' \
              '{
                repo_name: $repo_name,
                owner: $owner,
                branch: $branch,
                commit_hash: $commit_hash,
                project_name: $project_name,
                language: $language,
                triggered_by: $triggered_by,
                engines: [$engine]
              }')" > secrets_result.json

      - name: Evaluate Secret Scan Results
        run: |
          if ! jq -e '.summary | type == "array"' secrets_result.json > /dev/null; then
            echo "❌ Invalid Secret scan result"
            cat secrets_result.json
            exit 1
          fi

          VULN_COUNT=$(jq '[.summary[] | .count] | add' secrets_result.json)
          echo "🔢 Secret findings: $VULN_COUNT"

          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "🚨 Secret scan failed. Blocking pipeline."
            jq -r '.summary[] | "• \(.bug_name): \(.count) [\(.severity)]"' secrets_result.json
            jq -r '.dashboard' secrets_result.json
            exit 1
          else
            echo "✅ Secret scan passed."
          fi
